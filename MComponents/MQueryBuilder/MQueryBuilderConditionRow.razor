@using MComponents.MSelect
@using MComponents.Resources;
@using Microsoft.AspNetCore.Components.CompilerServices;

<div class="m-query-builder-row m-query-builder-condition-row">

    <div class="m-query-builder-connector">
        <div class="m-query-builder-connector-top"></div>
        <div class="m-query-builder-connector-bottom"></div>
    </div>

    <div class="m-query-builder-condition-content">

        <MSelect @bind-Value=@Field Property="@nameof(MQueryBuilderField.RuleName)" Options="QueryBuilder.Fields" @bind-Value:after="OnFieldChanged" CustomFormatter="f => f.Title ?? f.RuleName" />

        @if (Field != null && mOperators != null && mOperators.Length > 0)
        {
            <MSelect @bind-Value=@Condition.Operator @bind-Value:after="OnOperatorChanged" Options="mOperators" IsDisabled="mOperators.Length <= 1" />
        }

        @if (mPropertyType != null)
        {
            <CascadingValue Value="mEditContext">

                @if (Field is IMComplexQueryBuilderField cf && cf.HasFormTemplate)
                {
                    @RenderComplex(cf)
                }
                else
                {
                    var value = Condition.Values?[0];
                    <MInputValue @bind-Value="value" @bind-Value:after="async () => { if(Condition.Values == null) { Condition.Values = new object[1]; } Condition.Values[0] = value; Condition.ValuesTypeNames = [mPropertyType.FullName]; await QueryBuilder.InvokeRulesChanged(); }" ValueType="mPropertyType" />
                }

            </CascadingValue>
        }

        <button type="button" class="m-btn m-btn-secondary m-btn-icon m-btn-sm" @onclick="() => QueryBuilder.RemoveCondition(Condition)"><i class="fa-solid fa-trash-can"></i></button>

    </div>

</div>


@code {

    [Parameter]
    public MQueryBuilderJsonCondition Condition { get; set; }

    [Parameter]
    public IMQueryBuilder QueryBuilder { get; set; }

    public IMQueryBuilderField Field { get; set; }

    protected EditContext mEditContext = new EditContext(string.Empty);
    protected Type mPropertyType;
    protected IDictionary<string, object> FakeModel = new Dictionary<string, object>();
    protected MQueryBuilderConditionOperator?[] mOperators = new MQueryBuilderConditionOperator?[0];

    protected bool IsMultiValueField => mPropertyType.IsArray;

    protected override void OnParametersSet()
    {
        Update();
    }

    protected void Update()
    {
        if (string.IsNullOrWhiteSpace(Condition.RuleName))
            return;

        Field = QueryBuilder.Fields.FirstOrDefault(f => f.RuleName == Condition.RuleName);

        if (Field == null)
            return;

        mPropertyType = Field.PropertyType;

        if (mPropertyType == null)
        {
            mPropertyType = ReflectionHelper.GetIMPropertyInfo(QueryBuilder.ModelType, Field.RuleName, null)?.PropertyType;
        }

        LoadOperators();
    }

    protected RenderFragment RenderComplex(IMComplexQueryBuilderField field)
    {
        var appendMethod = typeof(MQueryBuilderConditionRow).GetMethod(nameof(MQueryBuilderConditionRow.RenderComplexFormTemplate), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).MakeGenericMethod(mPropertyType);
        return (RenderFragment)appendMethod.Invoke(this, new object[] { field });
    }

    protected RenderFragment RenderComplexFormTemplate<TProperty>(MQueryBuilderComplexField<TProperty> field)
    {
        TProperty value;

        if (IsMultiValueField && Field is IMComplexQueryBuilderField complex)
        {
            var array = Array.CreateInstance(typeof(TProperty).GetElementType(), complex.ParameterCount);

            for (int i = 0; i < complex.ParameterCount; i++)
            {
                if (Condition.Values != null && Condition.Values.Length > i)
                {
                    var val = ReflectionHelper.ChangeType(Condition.Values[i], typeof(TProperty).GetElementType());
                    array.SetValue(val, i);
                }
            }

            value = (TProperty)(object)array;
        }
        else
        {
            value = ReflectionHelper.ChangeType<TProperty>(Condition.Values?[0] ?? default(TProperty));
        }

        var context = new MQueryBuilderFormTemplateContext<TProperty>()
            {
                Value = value,
                ValueChanged = RuntimeHelpers.CreateInferredEventCallback<TProperty>(this, async v =>
                {
                    if (IsMultiValueField)
                    {
                        await OnValuesChanged((v as Array).Cast<object>().ToArray());
                    }
                    else
                    {
                        await OnValueChanged(v);
                    }
                }, value),
                ValueExpression = RenderHelper.GetFakePropertyInfoExpression<TProperty>(FakeModel, Condition.RuleName),
            };

        return field.FormTemplate(context);
    }

    protected async Task OnFieldChanged()
    {
        Condition.Values = null;
        Condition.ValuesTypeNames = null;
        Condition.Operator = null;
        Condition.RuleName = Field.RuleName;
        Update();
        await QueryBuilder.InvokeRulesChanged();
    }

    protected void LoadOperators()
    {
        var operators = Field.AllowedOperators;

        if (operators == null)
        {
            operators = MQueryBuilderConditionOperatorHelper.GetOperatorsFromType(mPropertyType);
        }

        mOperators = operators.Cast<MQueryBuilderConditionOperator?>().ToArray();

        if (Condition.Operator == null)
        {
            Condition.Operator = mOperators.FirstOrDefault();
        }
    }

    protected async Task OnOperatorChanged()
    {
        await QueryBuilder.InvokeRulesChanged();
    }

    protected async Task OnValuesChanged(object[] values)
    {
        Condition.Values = values;
        Condition.ValuesTypeNames = values.Select(_ => mPropertyType.GetElementType().FullName).ToArray();

        await QueryBuilder.InvokeRulesChanged();
    }

    protected async Task OnValueChanged(object value)
    {
        Condition.Values = [value];
        Condition.ValuesTypeNames = [mPropertyType.FullName];

        await QueryBuilder.InvokeRulesChanged();
    }

}
