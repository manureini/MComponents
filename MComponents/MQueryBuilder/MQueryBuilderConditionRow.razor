@using MComponents.MSelect
@using MComponents.Resources;
@using Microsoft.AspNetCore.Components.CompilerServices;

<div class="m-query-builder-rule-row">

    <MSelect @bind-Value=@Field Property="@nameof(MQueryBuilderField.RuleName)" Options="QueryBuilder.Fields" @bind-Value:after="OnFieldChanged" />

    @if (Field != null && mOperators != null && mOperators.Length > 0)
    {
        <MSelect @bind-Value=@Condition.Operator @bind-Value:after="OnOperatorChanged" Options="mOperators" IsDisabled="mOperators.Length <= 1" />
    }

    @if (mPropertyType != null)
    {
        <CascadingValue Value="mEditContext">

            @if (Field is IMComplexQueryBuilderField cf && cf.HasFormTemplate)
            {
                @RenderComplex(cf)
            }
            else
            {
                <MInputValue @bind-Value="Condition.Value" @bind-Value:after="QueryBuilder.InvokeRulesChanged" ValueType="mPropertyType" />
            }

        </CascadingValue>
    }

    <button type="button" class="m-btn" @onclick="() => QueryBuilder.RemoveCondition(Condition)">@L[nameof(MComponentsLocalization.Delete)]</button>

</div>


@code {

    [Parameter]
    public MQueryBuilderJsonCondition Condition { get; set; }

    [Parameter]
    public IMQueryBuilder QueryBuilder { get; set; }

    public IMQueryBuilderField Field { get; set; }

    protected EditContext mEditContext = new EditContext(string.Empty);
    protected Type mPropertyType;
    protected IDictionary<string, object> FakeModel = new Dictionary<string, object>();
    protected MQueryBuilderConditionOperator?[] mOperators = new MQueryBuilderConditionOperator?[0];

    protected override void OnParametersSet()
    {
        Update();
    }

    protected void Update()
    {
        if (string.IsNullOrWhiteSpace(Condition.RuleName))
            return;

        Field = QueryBuilder.Fields.FirstOrDefault(f => f.RuleName == Condition.RuleName);
        mPropertyType = Field?.PropertyType;

        if (mPropertyType == null)
        {
            mPropertyType = ReflectionHelper.GetIMPropertyInfo(QueryBuilder.ModelType, Field.RuleName, null)?.PropertyType;
        }

        LoadOperators();
    }

    protected RenderFragment RenderComplex(IMComplexQueryBuilderField field)
    {
        var appendMethod = typeof(MQueryBuilderConditionRow).GetMethod(nameof(MQueryBuilderConditionRow.RenderComplexFormTemplate), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).MakeGenericMethod(mPropertyType);
        return (RenderFragment)appendMethod.Invoke(this, new object[] { field });
    }

    protected RenderFragment RenderComplexFormTemplate<TProperty>(MQueryBuilderComplexField<TProperty> field)
    {
        TProperty value = (TProperty)(Condition.Value ?? default(TProperty));

        var context = new MQueryBuilderFormTemplateContext<TProperty>()
            {
                Value = value,
                ValueChanged = RuntimeHelpers.CreateInferredEventCallback<TProperty>(this, async v =>
                {
                    await OnValueChanged(v);
                }, value),
                ValueExpression = RenderHelper.GetFakePropertyInfoExpression<TProperty>(FakeModel, Condition.RuleName),
            };

        return field.FormTemplate(context);
    }

    protected async Task OnFieldChanged()
    {
        Condition.Value = null;
        Condition.Operator = null;
        Condition.RuleName = Field.RuleName;
        Update();
        await QueryBuilder.InvokeRulesChanged();
    }

    protected void LoadOperators()
    {
        var operators = Field.AllowedOperators;

        if (operators == null)
        {
            operators = MQueryBuilderConditionOperatorHelper.GetOperatorsFromType(mPropertyType);
        }

        mOperators = operators.Cast<MQueryBuilderConditionOperator?>().ToArray();

        if (Condition.Operator == null)
        {
            Condition.Operator = mOperators.FirstOrDefault();
        }
    }

    protected async Task OnOperatorChanged()
    {
        await QueryBuilder.InvokeRulesChanged();
    }

    protected async Task OnValueChanged(object value)
    {
        Condition.Value = value;
        await QueryBuilder.InvokeRulesChanged();
    }

}
