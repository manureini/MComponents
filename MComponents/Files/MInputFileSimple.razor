@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@using System.Net.Http.Json

@inject IFileUploadService FileUploader
@inject IStringLocalizer L

@inherits InputBase<IFile>

<div class="m-input-file-simple-container">

    @if (mShowUploadFile || Value == null)
    {
        <div class="m-input-file-simple">
            <InputFile id="@mInputId" OnChange="@LoadFiles" accept="@Accept" />

            @if (Value != null)
            {
                <button type="button" class="m-btn m-btn-primary m-btn-sm" @onclick="OnBtnUploadNewFile">X</button>
            }
        </div>

        @if (mProgress > -1)
        {
            <div class="m-input-file-simple-progress-container">
                <div class="m-input-file-simple-progress-bar" style="width:@(mProgress)%"></div>
            </div>
        }
    }
    else
    {
        <div class="m-input-file-simple">
            <span class="m-input-file-simple-filename">@Value?.FileName</span>
            @if (!string.IsNullOrWhiteSpace(Value.Url))
            {
                <a class="m-btn m-btn-primary m-btn-icon m-btn-sm" href="@Value.Url" target="_blank"><i class="fa-solid fa-download"></i></a>
            }
            <button type="button" class="m-wizard-btn m-btn m-btn-primary m-btn-sm" @onclick="OnBtnUploadNewFile">@L["Upload new file"]</button>
        </div>
    }

</div>


@code {

    [Parameter]
    public string FileInputName { get; set; }

    [Parameter]
    public IDictionary<string, string> AdditionalHeaders { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Accept { get; set; }

    [Parameter]
    public Attribute[] Attributes { get; set; }

    [CascadingParameter]
    protected EditContext CascadedEditContext2 { get; set; }

    protected Guid mInputId = Guid.NewGuid();
    protected bool mShowUploadFile = false;
    protected int mProgress = -1;

    protected override void OnParametersSet()
    {
    }

    protected async void LoadFiles(InputFileChangeEventArgs e)
    {
        if (e.FileCount <= 0) //should we set the Document to null?
            return;

        if (AdditionalHeaders == null)
            AdditionalHeaders = new Dictionary<string, string>();

        if (!AdditionalHeaders.ContainsKey(nameof(FileInputName)))
            AdditionalHeaders.Add(nameof(FileInputName), FileInputName);

        var file = e.GetMultipleFiles(1).FirstOrDefault();
        var createdFile = await FileUploader.UploadFile(file, AdditionalHeaders, OnProgressChanged);

        CurrentValue = createdFile;
        mProgress = -1;
        mShowUploadFile = false;

        _ = InvokeAsync(StateHasChanged);
    }

    protected void OnProgressChanged(IBrowserFile pFile, long pBytesProcessed)
    {
        mProgress = (int)((float)pBytesProcessed / pFile.Size * 100);
        _ = InvokeAsync(StateHasChanged);
    }

    protected void OnBtnUploadNewFile()
    {
        mShowUploadFile = !mShowUploadFile;
    }

    protected override bool TryParseValueFromString(string value, out IFile result, out string validationErrorMessage)
    {
        result = null;
        validationErrorMessage = null;
        return false;
    }
}