@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@using System.Net.Http.Json
@using System.Threading;
@using System.Reflection;

@inject IFileUploadService FileUploader
@inject IStringLocalizer L

@inherits InputBase<IFile>

<div class="m-input-file-container">

    <div class="m-input-file-dropzone @mDropClass">
        <label>
            <i class="fa-solid fa-cloud-arrow-up fa-3x"></i><br />
            Datei auswählen oder hierher ziehen.
        </label>
        <InputFile OnChange="LoadFiles"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave"
                   title=""
                   multiple />
    </div>

    <div class="m-input-file-list-container">

        @if (MaxAllowedFiles == 1 && Value != null)
        {
            <MFileList @ref="mFileList" Files="new[] { Value }" OnDeleteFileClicked="OnFileDeleteClicked" OnCancelUploadClicked="OnCancelUploadClicked" />
        }
        else
        {
            <MFileList @ref="mFileList" Files="Values" OnDeleteFileClicked="OnFileDeleteClicked" OnCancelUploadClicked="OnCancelUploadClicked" />
        }

    </div>
</div>


@code {

    protected bool isLoading;

    [Parameter]
    public int MaxAllowedFiles { get; set; } = 1;

    [Parameter]
    public string FileInputName { get; set; }

    [Parameter]
    public IDictionary<string, string> AdditionalHeaders { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Accept { get; set; }

    [Parameter]
    public Attribute[] Attributes { get; set; }

    [Parameter]
    public ICollection<IFile> Values { get; set; }

    [Parameter]
    public EventCallback<ICollection<IFile>> ValuesChanged { get; set; }

    [Parameter]
    public Expression<Func<ICollection<IFile>>> ValuesExpression { get; set; }

    [CascadingParameter]
    protected EditContext CascadedEditContext2 { get; set; }

    protected string mDropClass = string.Empty;

    protected MFileList mFileList;
    protected CancellationTokenSource mCancellationTokenSource;
    protected IBrowserFile mCurrentlyUploadingFile;
    protected List<IBrowserFile> mUploadQueue = new List<IBrowserFile>();
    protected SemaphoreSlim mUploadSemaphore = new SemaphoreSlim(1, 1);

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        //Workaround for bypass check if ValueExpression is set
        parameters.SetParameterProperties(this);

        if (MaxAllowedFiles > 1)
        {
            EditContext = CascadedEditContext2;
            typeof(InputBase<IFile>).GetField("_hasInitializedParameters", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(this, true);
        }

        await base.SetParametersAsync(parameters);

        if (MaxAllowedFiles > 1)
        {
            FieldIdentifier = FieldIdentifier.Create(ValuesExpression);
        }
    }

    protected async void LoadFiles(InputFileChangeEventArgs e)
    {
        if (e.FileCount <= 0) //should we set the Document to null?
            return;

        if (AdditionalHeaders == null)
            AdditionalHeaders = new Dictionary<string, string>();

        if (!AdditionalHeaders.ContainsKey(nameof(FileInputName)))
            AdditionalHeaders.Add(nameof(FileInputName), FileInputName);

        int fileCountAvailable;

        if (MaxAllowedFiles > 1)
        {
            fileCountAvailable = MaxAllowedFiles - (Values != null ? Values.Count : 0) - mUploadQueue.Count;
        }
        else
        {
            fileCountAvailable = mUploadQueue.Count > 0 ? 0 : 1;
        }

        if (fileCountAvailable <= 0)
            return;

        var files = e.GetMultipleFiles(int.MaxValue).Take(fileCountAvailable);

        foreach (var file in files)
        {
            mUploadQueue.Add(file);
            mFileList.SetProgressbar(file, 0);
        }

        await InvokeAsync(StateHasChanged);

        try
        {
            await mUploadSemaphore.WaitAsync();

            var createdFiles = new List<IFile>();

            while (mUploadQueue.Any())
            {
                var file = mUploadQueue.First();

                try
                {
                    mCancellationTokenSource = new CancellationTokenSource();
                    mCurrentlyUploadingFile = file;

                    var createdFile = await FileUploader.UploadFile(file, AdditionalHeaders, OnProgressChanged, mCancellationTokenSource.Token);
                    createdFiles.Add(createdFile);

                    mFileList.SetUploadDone(file);

                    if (MaxAllowedFiles > 1)
                    {
                        Values.Add(createdFile);
                        await ValuesChanged.InvokeAsync(Values);
                    }
                }
                catch (OperationCanceledException)
                {
                    mFileList.RemoveFileInProgress(file);
                }

                mUploadQueue.Remove(file);

                await InvokeAsync(StateHasChanged);
            }

            if (MaxAllowedFiles <= 1)
            {
                var createdFile = createdFiles.FirstOrDefault();

                if (createdFile != null)
                    CurrentValue = createdFile;
            }
        }
        finally
        {
            mUploadSemaphore.Release();
        }

        await InvokeAsync(StateHasChanged);
    }

    protected void OnProgressChanged(IBrowserFile pFile, long pBytesProcessed)
    {
        if (mUploadQueue.Contains(pFile))
            mFileList.SetProgressbar(pFile, (int)((float)pBytesProcessed / pFile.Size * 100));
    }

    protected void HandleDragEnter()
    {
        mDropClass = "active";
        StateHasChanged();
    }

    protected void HandleDragLeave()
    {
        mDropClass = string.Empty;
    }

    protected void OnFileDeleteClicked(IFile pFile)
    {
        Value = null;
        ValueChanged.InvokeAsync(null);

        if (Values != null)
        {
            Values.Remove(pFile);
            ValuesChanged.InvokeAsync(Values);
        }

        StateHasChanged();
    }

    protected void OnCancelUploadClicked(IBrowserFile pBrowserFile)
    {
        if (pBrowserFile == mCurrentlyUploadingFile)
        {
            mCancellationTokenSource?.Cancel();
        }

        mFileList.RemoveFileInProgress(pBrowserFile);
        mUploadQueue.Remove(pBrowserFile);
    }

    protected override bool TryParseValueFromString(string value, out IFile result, out string validationErrorMessage)
    {
        result = null;
        validationErrorMessage = null;
        return false;
    }
}