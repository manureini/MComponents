
@{ const string DISABLED_CLASS = "m-pagination-entry--disabled"; }

<div class="m-pagination-container">
    <ul class="m-pagination-entry m-pagination-list">

        <li class="m-pagination-entry m-pagination-entry--prev @(CurrentPage <= 1 ? DISABLED_CLASS : string.Empty)">
            <a @onclick=OnPrev><i class="fa-solid fa-angle-left"></i></a>
        </li>

        @if (mCollapse)
        {
            @if (mLeftDots)
            {
                <li class="@GetCssClass(1)">
                    <a @onclick="() => JumpTo(1)">1</a>
                </li>

                <li class="@GetCssClass(-1) m-pagination-entry--more">
                    <a>...</a>
                </li>
            }


            for (var i = LeftValue; i < RightValue; i++)
            {
                var index = i;
                <li class="@GetCssClass(i)">
                    <a @onclick="@(() => JumpTo(index))">@i</a>
                </li>
            }


            @if (mRightDots)
            {
                <li class="@GetCssClass(-1) m-pagination-entry--more">
                    <a>...</a>
                </li>

                <li class="@GetCssClass(PageCount)">
                    <a @onclick="() => JumpTo(PageCount)">@PageCount</a>
                </li>
            }

        }
        else
        {
            for (var i = 1; i < PageCount + 1; i++)
            {
                int index = i;
                <li class="@GetCssClass(i)">
                    <a @onclick="() => JumpTo(index)">@i</a>
                </li>
            }
        }

        <li class="m-pagination-entry m-pagination-entry--next @(CurrentPage == PageCount || PageCount == 0 ? DISABLED_CLASS : string.Empty)">
            <a @onclick=OnNext><i class="fa-solid fa-angle-right"></i></a>
        </li>

    </ul>

    @ChildContent

</div>




@code {

    [Parameter]
    public long PageCount { get; set; }

    [Parameter]
    public int DisplayCount { get; set; } = 10;

    [Parameter]
    public long CurrentPage { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<long> OnPageChanged { get; set; }


    long LeftValue = 0;
    long RightValue = 0;

    bool mCollapse = false;

    bool mLeftDots = false;
    bool mRightDots = false;

    override protected void OnInitialized()
    {
        Update();
    }

    override protected void OnParametersSet()
    {
        Update();
    }

    protected void Update()
    {
        if (PageCount > DisplayCount)
        {
            mCollapse = true;
        }

        if (CurrentPage <= 0)
            CurrentPage = 1;
        if (CurrentPage > PageCount)
            CurrentPage = Math.Max(1, PageCount);

        LeftValue = CurrentPage - (DisplayCount / 2);
        RightValue = CurrentPage + (DisplayCount / 2);

        if (DisplayCount % 2 != 0) //(DisplayCount / 2) -> .5 will be cut
        {
            RightValue++;
        }

        if (LeftValue < 1)
        {
            var diff = 1 - LeftValue;
            LeftValue += diff;
            RightValue += diff;
        }

        if (RightValue > PageCount)
        {
            var diff = RightValue - PageCount - 1;
            LeftValue -= diff;
            RightValue -= diff;
            LeftValue = Math.Max(1, LeftValue);
        }

        if (LeftValue > 1)
        {
            LeftValue += 2;
            mLeftDots = true;
        }
        else
        {
            mLeftDots = false;
        }

        if (RightValue <= PageCount)
        {
            RightValue -= 2;
            mRightDots = true;
        }
        else
        {
            mRightDots = false;
        }

        StateHasChanged();
    }

    public void OnPrev()
    {
        CurrentPage--;
        Update();
        _ = OnPageChanged.InvokeAsync(CurrentPage);
    }

    public void OnNext()
    {
        CurrentPage++;
        Update();
        _ = OnPageChanged.InvokeAsync(CurrentPage);
    }

    public void JumpTo(long pIndex)
    {
        CurrentPage = pIndex;
        Update();
        _ = OnPageChanged.InvokeAsync(CurrentPage);
    }

    public string GetCssClass(long pIndex)
    {
        if (pIndex == CurrentPage)
            return "m-pagination-entry m-pagination-entry--active";
        return "m-pagination-entry";
    }

}
