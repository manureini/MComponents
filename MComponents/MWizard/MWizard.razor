
@implements IMWizard

@using System.Threading;
@using System.Threading.Tasks;

<CascadingValue TValue="MWizard" Value="this">

    @Steps

    <div class="m-wizard m-wizard--@GetCurrentState()">

        <div class="m-wizard-navigation">

            @{
                int i = 0;
                int visible = 1;
                int visibleCount = WizardSteps.Count(s => s.IsVisible);
            }

            @foreach (var entry in WizardSteps)
            {
                if (entry.IsVisible)
                {
                    string state = "pending";

                    if (i == CurrentStep)
                        state = "current";

                    int index = i; //deep copy for onclick lambda

                    bool canJump = CanJumpTo(i);

                    <div class="m-wizard-navigation-item m-wizard-navigation-item--@state" style="flex: 0 0 calc(100%/@visibleCount); @(!FreezeCurrentStep && canJump ? "cursor: pointer;": "cursor: default;")" @onclick="() => OnJumpToClicked(index)">
                        <div class="m-wizard-navigation-item-title-contaier">
                            <span>@(visible).</span> @entry.Title
                        </div>
                        <div class="m-wizard-navigation-item-bar"></div>
                    </div>
                    visible++;
                }

                i++;
            }
        </div>

        <div class="m-wizard-step-container">
            @if (CurrentStep >= 0 && WizardSteps.Count > CurrentStep)
            {
                <div class="m-wizard-step" @attributes="WizardSteps[CurrentStep].AdditionalAttributes">
                    @if(mEmptyRender)
                    {
                        <span class="m-wizard-empty"></span>
                    } else {
                        @WizardSteps[CurrentStep].Content.Invoke(WizardSteps[CurrentStep].StepContext)
                    }
                </div>
            }

            @if (!FreezeCurrentStep)
            {
                <div class="m-wizard-action-group">
                    @ButtonPrev
                    @ButtonNext
                    @ButtonFinish
                </div>
            }
        </div>
    </div>

</CascadingValue>
